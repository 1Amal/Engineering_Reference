Place to add all updates to the reference database before they are entered into the database. Use this document as an Draft. 

**************** Pending updates ****************

*** JavaScript ****
https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault
The preventDefault() method of the Event interface tells the user agent that if the event does not get explicitly handled, 
its default action should not be taken as it normally would be.

Form Basics
https://www.theodinproject.com/lessons/node-path-intermediate-html-and-css-form-basics

***** Git *****
When the repo is cloned between Windows and Linux/Unix machines.

Just tell git to ignore filemode change. Here are several ways to do so:

    Config ONLY for current repo:

     git config core.filemode false

    Config globally:

     git config --global core.filemode false

    Add in ~/.gitconfig:

     [core]
          filemode = false
          
          
 Public e-mail address change if you get this error
  ! [remote rejected] main -> main (push declined due to email privacy restrictions)
  
  You can see your personal e-mail address, which is used by default for your commits in Git:

git config --global user.email
Find your GitHub noreply address in your GitHub's Personal Settings → Emails. It's mentioned in the description of the Keep my email address private checkbox. Usually, it starts with a unique identifier, plus your username:

{ID}+{username}@users.noreply.github.com

Change the global user e-mail address setting to be your GitHub noreply address:

git config --global user.email {ID}+{username}@users.noreply.github.com
Reset the author information on your last commit:

git commit --amend --reset-author
If you have multiple commits with your private e-mail address, see this answer.

Now you can push the commit with the noreply e-mail address, and future commits will have the noreply e-mail address as well.

git push

*****VS Code Extensions****
Favourites Manager
`ext install oleg-shilo.favorites`

Open Settings
references: Open Settings or use the keyboard shortcut (Ctrl+,)

*** VS Code ****
https://code.visualstudio.com/docs/languages/markdown

To switch between views, press Ctrl+Shift+V in the editor. You can view the preview side-by-side (Ctrl+K V) with the file you are editing and see changes reflected in real-time as you edit.

***React***
Please make sure that you are using the LTS version of Node, otherwise errors may occur. Fire up a terminal instance, cd into the folder containing your projects, and enter the following command (you can replace my-first-react-app with any name you want):
npm create vite@latest my-first-react-app -- --template react
Then follow the instructions to fully setup Vite
To link your local project directory to a GitHub repo, create a new empty repo on GitHub then follow the instructions in the new repo’s page to connect it to your local project directory.

Using an existing GitHub repo
Alternatively, if you created a GitHub repo already and cloned it, you can cd into your cloned repo then run the above Vite command, using . as the project name:

npm create vite@latest . -- --template react
This will tell Vite to use the current directory for the project, instead of creating a new directory with the given project name. This cloned directory will already be initialized as a git repo and connected to the right remote.

***** Linux *****
Run Nautilus File Manager with Root privileges: nautilus admin:/
prompt with root permissions with the command: sudo -i and CTRL+D to go back to normal user

sudo lshw : View hardware info
Edit the Laptop Lid close behaviour
sudo gnome-text-editor /etc/systemd/logind.conf
find out the line #HandleLidSwitch=suspend and change it to one of following :

    HandleLidSwitch=lock – lock when lid closed.
    HandleLidSwitch=ignore – do nothing, some laptops will disconnect Wi-Fi.
    HandleLidSwitch=poweroff – shutdown.
    HandleLidSwitch=hibernate – hibernate Ubuntu.
    
    sudo lshw : View hardware info

restart your computer

Fixing the Encrypted drive issues on boot initramfs
When you boot Ubuntu will not mount the encrypted drive as for some reason i.e. /etc/crypttab has been changed
cryptsetup luksOpen /dev/nvme0n1p3 DecryptedDrive
Enter the correct password and then exit the console
exit
*nvme0n1p3 is the default name for the SSD, change as per the correct device

Once Ubuntu boots up normally (after the encrypted drive is mounted according to the above)
Edit the /etc/crypttab by
sudo nano /etc/crypttab

Also open up Ubuntu Disks manager and look for the LUKS encrypted drive UUID then add to the 
DecryptedDrive UUID=XXXXX none nofail
Then update initramfs as follows
sudo update-initramfs -u -k all

Check the Laptop battery status
upower -i /org/freedesktop/UPower/devices/battery_BAT0

Lenovo Thinkpad
Find serial number
sudo dmidecode -t system | grep Serial
To find the baseboard serial number:
sudo dmidecode -t baseboard | grep Serial

***** Microsoft Windows *****


***** Raspberri Pi ***** 

****  VS Code *****
To Open VSCode from the same folder: code .
To switch between views, press Ctrl+Shift+V in the editor. 
You can view the preview side-by-side (Ctrl+K V) with the file you are editing and see changes reflected in real-time as you edit.


**** Git *****
To create a new branch in Git, first check your current branch using git branch. Then, create and switch to a new branch with git checkout -b <new-branch-name>. If you want to push the new branch to the remote repository, use git push -u origin <new-branch-name>. To switch back to the main branch or any other branch, run git checkout main (or the branch name you wish to switch to).

How to connect local folder to new/existing GitHub repository
First register a project as a local Git repository the first thing you need to do is perform the following command at your project root:

git init
This will create a .git folder at your project root and will allow you to start using Git in that repository.You can call origin whatever you like, really, but origin is the standard name for Git remote repositories. <Repository_Location> is the URL to your remote repository. For example, if I had a new project called reactResumeCVWebApp which I want 

`git remote add origin git@github.com:1Amal/reactResumeCVWebApp.git`
Then `git push --set-upstream origin main` to set the default upstream branch

Then git pull to download the github repo to local folder 
`git pull origin main`
Most of the time you will get an error as you have different files on Github (initial repository files such as .gitignore) and different files in your local repo i.e. Vite created src, public folders and other files if so use
`git pull origin main --allow-unrelated-histories`

-----
Automatically deploy to Github Pages
Step 1 Remove the 'dist' directory from the project’s .gitignore file.

Step 2 Make sure git knows about your subtree (the subfolder with your site).

git add dist && git commit -m "Initial dist subtree commit"

Step 3 Use subtree push to send it to the gh-pages branch on GitHub.

git subtree push --prefix dist origin gh-pages Boom. If your folder isn’t called dist, then you’ll need to change that in each of the commands above.
-----
By adding this to the packages.json (Already configured for this repo) You can simply push the commit to both the main branch and the gh-pages branch (Git Hub pages will be served from gh-pages branch) "scripts": {"gh-pages": "git subtree push --prefix dist origin gh-pages && git push"}

npm run gh-pages


-----
make a new branch and change to it with the command `git checkout -b <branch name>`
Push this new branch to your remote repo with the command `git push origin <branch name>`
You can check current branch, with the `git branch` command. The branch you are currently on will have an (*)asterisk next to it.
Now you’re all set to work on your new feature! Note: You can add files, commit to this branch, and push changes to your repo, just like you would with the main branch. Everything is the same except when you push the changes, you’d use `git push origin <New Branch Name>` instead of git push origin main, since we’re pushing to our new branch.

To merge the changes from our New branch back to our main branch;
Checkout the branch we want to merge INTO i.e. main with the command git checkout main.
Now let’s merge our <new branch> into `main`, our current branch, with git merge <new branch>.
If everything goes fine, new branch is now successfully merged with main! Use git log and you’ll see all the commits you’ve made to your new branch on top of the commits you made to the main branch.
To push main branch into our remote repo by running git push origin main . Go to your GitHub repo and you’ll see that our main branch will have all the changes and commits you made to the <new branch> 
Now that we have all our code in the main branch, we don’t really need our <new branch> branch anymore. Let’s do some cleanup, both locally and in the remote repo. Delete the branch from our local repo with git branch -d <new branch name> and also delete it from the remote repo on GitHub with git push origin --delete <new branch name>.
